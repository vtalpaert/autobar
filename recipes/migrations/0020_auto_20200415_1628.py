# Generated by Django 2.2.2 on 2020-04-15 14:28

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('recipes', '0019_auto_20200415_1523'),
    ]

    operations = [
        migrations.RenameField(
            model_name='configuration',
            old_name='show_only_available_mixes',
            new_name='ux_show_only_available_mixes',
        ),
        migrations.RenameField(
            model_name='configuration',
            old_name='show_only_verified_mixes',
            new_name='ux_show_only_verified_mixes',
        ),
        migrations.AddField(
            model_name='configuration',
            name='button_blink_time_led_green',
            field=models.FloatField(default=0.5, help_text='[s] half period'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='button_bounce_time_green',
            field=models.FloatField(default=3, help_text='[s] length of time that the component will ignore changes in state after an initial change'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='button_bounce_time_red',
            field=models.FloatField(default=10, help_text='[s] length of time that the component will ignore changes in state after an initial change'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='button_hold_time_green',
            field=models.FloatField(default=0.1, help_text='[s] length of time to wait after the button is pushed, until executing the when_held handler'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='button_hold_time_red',
            field=models.FloatField(default=5, help_text='[s] length of time to wait after the button is pushed, until executing the when_held handler'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='hardware_use_dummy',
            field=models.BooleanField(default=True, help_text='For debug, keep False otherwise'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_delay_before_start_serving',
            field=models.FloatField(default=2, help_text='[s] length of time to wait before starting a mix to account for weight variation when putting down a glass'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_delay_between_two_doses',
            field=models.FloatField(default=1, help_text='[s] length of time to wait before starting a new dose to account for flow delay'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_empty_dispenser_makes_mix_not_available',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_glass_detection_value',
            field=models.FloatField(default=10, help_text='[g*] value to decide a glass is present (unit depends on weight_cell_ratio)'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_mark_not_serving_dispensers_as_empty',
            field=models.BooleanField(default=False, help_text='Mark dispenser empty if cannot reach target weight within the timeout limit'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_serve_even_if_no_glass_detected',
            field=models.BooleanField(default=False, help_text='Start serving even if no glass is detected'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_show_only_real_ingredients',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_timeout_glass_detection',
            field=models.FloatField(default=10, help_text='[s] length of time before abandon of glass detection'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_timeout_serving',
            field=models.FloatField(default=10, help_text='[s] length of time before concluding to an anomaly while serving from a dispenser'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='ux_use_green_button_to_start_serving',
            field=models.BooleanField(default=True, help_text='If False, serving is triggered by sensing if glass is present'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='weight_cell_channel',
            field=models.SmallIntegerField(choices=[(32, 32), (64, 64), (128, 128)], default=128, help_text='Gain 32 is only for channel B, others for channel A'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='weight_cell_offset',
            field=models.FloatField(default=0, help_text='The tare value'),
        ),
        migrations.AddField(
            model_name='configuration',
            name='weight_cell_ratio',
            field=models.FloatField(default=1, help_text='Transforms a tared value to grams'),
        ),
        migrations.AlterField(
            model_name='order',
            name='status',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Init'), (1, 'Press button or place glass to start'), (2, 'Serving'), (3, 'Finished'), (4, 'Abandon')], default=0),
        ),
    ]
